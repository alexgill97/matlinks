-- Subtask 3.1: Core Entity Schema

-- Gyms Table
CREATE TABLE gyms (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  logo_url TEXT,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Locations Table
CREATE TABLE locations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  gym_id BIGINT NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  address TEXT,
  contact_info JSONB, -- Store phone, email etc.
  operating_hours JSONB, -- Store hours per day
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Profiles Table (Extends Supabase Auth Users)
-- Supabase automatically creates a 'users' table in the 'auth' schema.
-- We create a 'profiles' table in the 'public' schema to store additional user data.
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  -- username TEXT UNIQUE,
  -- avatar_url TEXT,
  -- website TEXT,
  role TEXT DEFAULT 'student' NOT NULL CHECK (role IN ('owner', 'admin', 'instructor', 'student')),
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,

  CONSTRAINT check_role CHECK (role IN ('owner', 'admin', 'instructor', 'student'))
);

-- Function to automatically create a profile when a new user signs up in Supabase Auth
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (NEW.id, 'student'); -- Default role is student
  RETURN NEW;
END;
$$;

-- Trigger the function after user insertion in auth.users table
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Enable Row Level Security (RLS) for profiles
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Policies for profiles table
-- Users can view their own profile.
CREATE POLICY "Users can view their own profile." ON profiles
  FOR SELECT USING (auth.uid() = id);

-- Users can update their own profile.
CREATE POLICY "Users can update own profile." ON profiles
  FOR UPDATE USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- TODO: Add policies for admins/owners to view/manage profiles if needed.

-- Enable RLS for gyms and locations (basic policies - adjust as needed)
ALTER TABLE gyms ENABLE ROW LEVEL SECURITY;
ALTER TABLE locations ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to view gyms and locations (adjust based on requirements)
CREATE POLICY "Authenticated users can view gyms" ON gyms
  FOR SELECT TO authenticated USING (true);
CREATE POLICY "Authenticated users can view locations" ON locations
  FOR SELECT TO authenticated USING (true);

-- TODO: Add policies for owners/admins to create/update/delete gyms/locations 