-- Subtask 3.2: Membership and Billing Schema

-- Membership Plans Table
CREATE TABLE membership_plans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  gym_id BIGINT NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC(10, 2) NOT NULL DEFAULT 0.00 CHECK (price >= 0),
  billing_interval TEXT DEFAULT 'month' NOT NULL CHECK (billing_interval IN ('day', 'week', 'month', 'year')), -- Or use ENUM type if preferred
  attendance_limit INT, -- Nullable, e.g., per week/month depending on gym policy
  features JSONB, -- Store list of features/benefits
  is_active BOOLEAN DEFAULT true NOT NULL,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- User Memberships Table (Junction table)
CREATE TABLE user_memberships (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  plan_id BIGINT NOT NULL REFERENCES membership_plans(id) ON DELETE RESTRICT, -- Don't delete plan if users have it
  start_date DATE NOT NULL DEFAULT CURRENT_DATE,
  end_date DATE, -- Nullable for ongoing memberships
  status TEXT DEFAULT 'active' NOT NULL CHECK (status IN ('active', 'inactive', 'paused', 'cancelled', 'pending_payment')), -- Or use ENUM type
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Billing Records Table
CREATE TABLE billing_records (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_membership_id BIGINT REFERENCES user_memberships(id) ON DELETE SET NULL, -- Keep record even if membership is deleted
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  amount NUMERIC(10, 2) NOT NULL,
  currency CHAR(3) NOT NULL DEFAULT 'USD',
  status TEXT NOT NULL CHECK (status IN ('pending', 'paid', 'failed', 'refunded')), -- Or use ENUM type
  payment_method TEXT, -- e.g., 'stripe', 'manual'
  transaction_id TEXT, -- e.g., Stripe charge ID
  billing_period_start DATE,
  billing_period_end DATE,
  paid_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Promotions Table
CREATE TABLE promotions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  gym_id BIGINT NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  code TEXT UNIQUE NOT NULL,
  description TEXT,
  discount_type TEXT NOT NULL CHECK (discount_type IN ('percentage', 'fixed_amount')), -- Or use ENUM type
  discount_value NUMERIC(10, 2) NOT NULL CHECK (discount_value >= 0),
  valid_from DATE,
  valid_until DATE,
  usage_limit INT, -- Max number of times the code can be used overall
  is_active BOOLEAN DEFAULT true NOT NULL,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Promotion Redemptions Table
CREATE TABLE promotion_redemptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  promotion_id BIGINT NOT NULL REFERENCES promotions(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  user_membership_id BIGINT REFERENCES user_memberships(id) ON DELETE SET NULL,
  billing_record_id BIGINT REFERENCES billing_records(id) ON DELETE SET NULL, -- Link redemption to specific payment
  redeemed_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Indexes for common queries
CREATE INDEX idx_user_memberships_user_id ON user_memberships(user_id);
CREATE INDEX idx_billing_records_user_id ON billing_records(user_id);
CREATE INDEX idx_promotion_redemptions_user_id ON promotion_redemptions(user_id);
CREATE INDEX idx_promotion_redemptions_promotion_id ON promotion_redemptions(promotion_id);

-- Enable RLS for new tables
ALTER TABLE membership_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_memberships ENABLE ROW LEVEL SECURITY;
ALTER TABLE billing_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE promotions ENABLE ROW LEVEL SECURITY;
ALTER TABLE promotion_redemptions ENABLE ROW LEVEL SECURITY;

-- Basic RLS Policies (adjust as needed)

-- Membership Plans: Authenticated users can view active plans
CREATE POLICY "Authenticated users can view active membership plans" ON membership_plans
  FOR SELECT TO authenticated USING (is_active = true);
-- TODO: Add policy for admins/owners to manage plans

-- User Memberships: Users can view their own memberships
CREATE POLICY "Users can view their own memberships" ON user_memberships
  FOR SELECT USING (auth.uid() = user_id);
-- TODO: Add policy for admins/owners to manage user memberships

-- Billing Records: Users can view their own billing records
CREATE POLICY "Users can view their own billing records" ON billing_records
  FOR SELECT USING (auth.uid() = user_id);
-- TODO: Add policy for admins/owners to manage billing records

-- Promotions: Authenticated users can view active promotions
CREATE POLICY "Authenticated users can view active promotions" ON promotions
  FOR SELECT TO authenticated USING (is_active = true AND (valid_until IS NULL OR valid_until >= CURRENT_DATE));
-- TODO: Add policy for admins/owners to manage promotions

-- Promotion Redemptions: Users can view their own redemptions
CREATE POLICY "Users can view their own promotion redemptions" ON promotion_redemptions
  FOR SELECT USING (auth.uid() = user_id);
-- TODO: Add policy for admins/owners to view redemptions 