// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schemas will be defined during implementation based on PRD

model DunningNotification {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  paymentId     String    @map("payment_id") @db.Uuid
  stage         String
  scheduledDate DateTime  @map("scheduled_date")
  sentDate      DateTime? @map("sent_date")
  status        String
  failureType   String    @map("failure_type")
  amount        Int
  currency      String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paymentId])
  @@index([status, scheduledDate])
  @@map("dunning_notifications")
}

model PendingSubscriptionCancellation {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  subscriptionId String    @map("subscription_id")
  scheduledDate  DateTime  @map("scheduled_date")
  paymentId      String    @map("payment_id") @db.Uuid
  processed      Boolean   @default(false)
  processedDate  DateTime? @map("processed_date")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@index([processed, scheduledDate])
  @@map("pending_subscription_cancellations")
}

model SubscriptionCancellation {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  subscriptionId String    @map("subscription_id")
  reason         String?
  canceledAt     DateTime  @map("canceled_at")
  effectiveDate  DateTime? @map("effective_date")
  immediate      Boolean   @default(false)
  createdAt      DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@map("subscription_cancellations")
}
